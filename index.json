[{"content":" ","date":"2024年11月19日","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"2024年11月19日","externalUrl":null,"permalink":"/posts/","section":"","summary":"","title":"","type":"posts"},{"content":"","date":"2024年11月19日","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"2024年11月19日","externalUrl":null,"permalink":"/tags/blowfish/","section":"Tags","summary":"","title":"Blowfish","type":"tags"},{"content":" 缘起 为什么要去自定义一个头部导航栏？其实blowfish本身已经提供了很多的样式，比如最基本的basic，还有各种的fixed。只论实用性的话，或许blowfish自带的这些已经很好了，看起来简约大方。但是根据自己的想法去diy一个看起来cool的设计，可能是不少折腾网站的人都会踩过的坑吧。\n设计这个菜单栏的想法来自加绒的Hugo Blowfish 自定义：导航栏上磨砂岛，可能是看惯了自己原本的fixed导航栏，第一次看到这种居中悬浮的设计觉得挺有意思。这位博主在文中描述了最重要的几个部分，并将源代码放在文末。对于我这种见好就收的白嫖党，第一想法肯定是二话不说咣咣复制。但是，遗憾的是，文末的html文件似乎失效了，于是乎只能摸着石头过河，从蛛丝马迹中尝试复现。\n设计想法 菜单栏的设计包括以下几个方面：\n悬浮居中，边框圆角 长度适中，蓝绿渐变 下划隐藏，上划显示 顶部透明，逐渐模糊 对于我这种只学过一点点编程，而且从没学过前端的新手来说，单独靠自己是完全不可能实现这些想法的。于是，我尝试把想法转译成具体的命令，借助AI帮我完成。恰好github有教育版免费的Copilot（非常nice），可以使用的模型有Clade 3.5 Sonnet、GPT 4和o1 mini等。\n接下来就是各种各样的试错环节，报错是千奇百怪的，比如导航栏消失了，按钮点不动，颜色使用一直不对等情况，反正挺考验人的心态。最后我给出的命令是让ai参照原本的basic.html去写，非必要不更改。在几个大模型中，只有Clade给出了正确答案。\n实现 首先需要新建/layouts/partials/header/float.html文件，然后在params.toml中将header选项下的layout设置成float。接下来将这段代码复制到float.html中：\n点击展开代码块 \u0026lt;!-- 更新滚动控制脚本 --\u0026gt; \u0026lt;!-- 更新滚动控制脚本 --\u0026gt; \u0026lt;script\u0026gt; let lastScrollTop = 0; let lastScrollDirection = 0; let island_header_style_top = 15; let accumulated_scroll = 0; window.addEventListener(\u0026#34;scroll\u0026#34;, function () { const scroll = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0; let currScrollDirection = scroll - lastScrollTop \u0026gt; 0 ? 1 : -1; const island_header = document.getElementById(\u0026#34;island-header\u0026#34;); const subheader = document.querySelector(\u0026#39;.main-menu + .main-menu\u0026#39;); // 计算透明度和模糊度 const opacity = Math.min(scroll / 300, 0.9); const blur = Math.min(scroll / 100 * 10, 10); // 应用背景和模糊效果 island_header.style.backgroundColor = `rgba(255, 255, 255, ${opacity})`; island_header.style.backdropFilter = `blur(${blur}px)`; if(subheader) { subheader.style.backgroundColor = `rgba(255, 255, 255, ${opacity})`; subheader.style.backdropFilter = `blur(${blur}px)`; } // 处理滚动隐藏逻辑 if (scroll \u0026gt; 100) { if (currScrollDirection !== lastScrollDirection) { accumulated_scroll = 0; } else { accumulated_scroll += Math.abs(scroll - lastScrollTop); } if (accumulated_scroll \u0026gt; 50 || currScrollDirection == -1) { // 计算新的top值 island_header_style_top = currScrollDirection === 1 ? Math.max(-100, island_header_style_top - 15) : // 向下滚动 Math.min(15, island_header_style_top + 15); // 向上滚动 // 应用变换 island_header.style.transform = `translateX(-50%) translateY(${island_header_style_top}px)`; if(subheader) { subheader.style.transform = `translateX(-50%) translateY(${island_header_style_top + 50}px)`; } } } lastScrollTop = scroll; lastScrollDirection = currScrollDirection; }); \u0026lt;/script\u0026gt; \u0026lt;!-- 主要导航栏容器 --\u0026gt; \u0026lt;div id=\u0026#34;island-header\u0026#34; style=\u0026#34; position: fixed; top: 15px; left: 50%; transform: translateX(-50%); width: 90%; /* 移动端下宽度更大 */ max-width: 900px; background: linear-gradient( 135deg, rgba(255, 255, 255, 0.45), rgba(147, 197, 253, 0.35) 20%, rgba(167, 243, 208, 0.4) 50%, rgba(147, 197, 253, 0.35) 80%, rgba(110, 231, 183, 0.4) ); backdrop-filter: blur(8px); border: 1px solid rgba(255, 255, 255, 0.45); border-radius: 0.75rem; /* 移动端圆角稍小 */ box-shadow: 0 4px 6px rgba(0, 0, 0, 0.03), 0 1px 3px rgba(147, 197, 253, 0.2) inset, 0 2px 6px rgba(167, 243, 208, 0.15) inset; transition: all 0.3s ease; z-index: 1000; padding: 0.25rem; /* 移动端内边距更小 */ @media (min-width: 768px) { /* 桌面端样式 */ width: 70%; padding: 0.25rem 0.5rem; border-radius: 1rem; } \u0026#34; class=\u0026#34;main-menu flex items-center justify-between px-2 py-1 sm:px-6 md:justify-start space-x-3\u0026#34;\u0026gt; {{ if .Site.Params.Logo }} {{ $logo := resources.Get .Site.Params.Logo }} {{ if $logo }} \u0026lt;div\u0026gt; \u0026lt;a href=\u0026#34;{{ \u0026#34;\u0026#34; | relLangURL }}\u0026#34; class=\u0026#34;flex\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;sr-only\u0026#34;\u0026gt;{{ .Site.Title | markdownify }}\u0026lt;/span\u0026gt; {{ if eq $logo.MediaType.SubType \u0026#34;svg\u0026#34; }} \u0026lt;span class=\u0026#34;logo object-scale-down object-left nozoom\u0026#34;\u0026gt; {{ $logo.Content | safeHTML }} \u0026lt;/span\u0026gt; {{ else }} \u0026lt;img src=\u0026#34;{{ $logo.RelPermalink }}\u0026#34; width=\u0026#34;{{ div $logo.Width 2 }}\u0026#34; height=\u0026#34;{{ div $logo.Height 2 }}\u0026#34; class=\u0026#34;logo max-h-[5rem] max-w-[5rem] object-scale-down object-left nozoom\u0026#34; alt=\u0026#34;{{ .Site.Title }}\u0026#34; /\u0026gt; {{ end }} \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {{ end }} {{- end }} \u0026lt;div class=\u0026#34;flex flex-1 items-center justify-between\u0026#34;\u0026gt; \u0026lt;nav class=\u0026#34;flex space-x-3\u0026#34;\u0026gt; {{ if not .Site.Params.disableTextInHeader | default true }} \u0026lt;a href=\u0026#34;{{ \u0026#34;\u0026#34; | relLangURL }}\u0026#34; class=\u0026#34;text-base font-medium text-gray-500 hover:text-gray-900\u0026#34;\u0026gt;{{ .Site.Title | markdownify }}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/nav\u0026gt; \u0026lt;nav class=\u0026#34;hidden md:flex items-center space-x-5 md:ml-12 h-12\u0026#34;\u0026gt; {{ if .Site.Menus.main }} {{ range .Site.Menus.main }} {{ partial \u0026#34;header/header-option.html\u0026#34; . }} {{ end }} {{ end }} {{ partial \u0026#34;translations.html\u0026#34; . }} {{ if .Site.Params.enableSearch | default false }} \u0026lt;button id=\u0026#34;search-button\u0026#34; aria-label=\u0026#34;Search\u0026#34; class=\u0026#34;text-base hover:text-primary-600 dark:hover:text-primary-400\u0026#34; title=\u0026#34;{{ i18n \u0026#34; search.open_button_title\u0026#34; }}\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; \u0026#34;search\u0026#34; }} \u0026lt;/button\u0026gt; {{ end }} {{/* Appearance switch */}} {{ if .Site.Params.footer.showAppearanceSwitcher | default false }} \u0026lt;div class=\u0026#34;{{ if .Site.Params.footer.showScrollToTop | default true -}} ltr:mr-14 rtl:ml-14 {{- end }} flex items-center\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;appearance-switcher\u0026#34; aria-label=\u0026#34;Dark mode switcher\u0026#34; type=\u0026#34;button\u0026#34; class=\u0026#34;text-base hover:text-primary-600 dark:hover:text-primary-400\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex items-center justify-center dark:hidden\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; \u0026#34;moon\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;items-center justify-center hidden dark:flex\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; \u0026#34;sun\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/nav\u0026gt; \u0026lt;div class=\u0026#34;flex md:hidden items-center space-x-5 md:ml-12 h-12\u0026#34;\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; {{ partial \u0026#34;translations.html\u0026#34; . }} {{ if .Site.Params.enableSearch | default false }} \u0026lt;button id=\u0026#34;search-button-mobile\u0026#34; aria-label=\u0026#34;Search\u0026#34; class=\u0026#34;text-base hover:text-primary-600 dark:hover:text-primary-400\u0026#34; title=\u0026#34;{{ i18n \u0026#34; search.open_button_title\u0026#34; }}\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; \u0026#34;search\u0026#34; }} \u0026lt;/button\u0026gt; {{ end }} {{/* Appearance switch */}} {{ if .Site.Params.footer.showAppearanceSwitcher | default false }} \u0026lt;button id=\u0026#34;appearance-switcher-mobile\u0026#34; aria-label=\u0026#34;Dark mode switcher\u0026#34; type=\u0026#34;button\u0026#34; class=\u0026#34;text-base hover:text-primary-600 dark:hover:text-primary-400\u0026#34; style=\u0026#34;margin-right:5px\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex items-center justify-center dark:hidden\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; \u0026#34;moon\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;items-center justify-center hidden dark:flex\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; \u0026#34;sun\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;/button\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;-my-2 -mr-2 md:hidden\u0026#34;\u0026gt; \u0026lt;label id=\u0026#34;menu-button\u0026#34; class=\u0026#34;block\u0026#34;\u0026gt; {{ if .Site.Menus.main }} \u0026lt;div class=\u0026#34;cursor-pointer hover:text-primary-600 dark:hover:text-primary-400\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; \u0026#34;bars\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;menu-wrapper\u0026#34; style=\u0026#34;padding-top:5px;\u0026#34; class=\u0026#34;fixed inset-0 z-30 invisible w-screen h-screen m-0 overflow-auto transition-opacity opacity-0 cursor-default bg-neutral-100/50 backdrop-blur-sm dark:bg-neutral-900/50\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;flex space-y-2 mt-3 flex-col items-end w-full px-6 py-6 mx-auto overflow-visible list-none ltr:text-right rtl:text-left max-w-7xl\u0026#34;\u0026gt; \u0026lt;li id=\u0026#34;menu-close-button\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;cursor-pointer inline-block align-text-bottom hover:text-primary-600 dark:hover:text-primary-400\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; \u0026#34;xmark\u0026#34; }} \u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; {{ range .Site.Menus.main }} {{ partial \u0026#34;header/header-mobile-option.html\u0026#34; . }} {{ end }} \u0026lt;/ul\u0026gt; {{ if .Site.Menus.subnavigation }} \u0026lt;hr\u0026gt; \u0026lt;ul class=\u0026#34;flex mt-4 flex-col items-end w-full px-6 py-6 mx-auto overflow-visible list-none ltr:text-right rtl:text-left max-w-7xl\u0026#34;\u0026gt; {{ range .Site.Menus.subnavigation }} \u0026lt;li class=\u0026#34;mb-1\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ .URL }}\u0026#34; {{ if or (strings.HasPrefix .URL \u0026#34;http:\u0026#34; ) (strings.HasPrefix .URL \u0026#34;https:\u0026#34; ) }} target=\u0026#34;_blank\u0026#34; {{ end }} class=\u0026#34;flex items-center\u0026#34;\u0026gt; {{ if .Pre }} \u0026lt;span {{ if and .Pre .Name}} class=\u0026#34;mr-3\u0026#34; {{ end }}\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; .Pre }} \u0026lt;/span\u0026gt; {{ end }} \u0026lt;p class=\u0026#34;text-sm font-sm text-gray-500 hover:text-gray-900\u0026#34; title=\u0026#34;{{ .Title }}\u0026#34;\u0026gt; {{ .Name | markdownify }} \u0026lt;/p\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ if .Site.Menus.subnavigation }} \u0026lt;div class=\u0026#34;main-menu flex pb-2 flex-col items-end justify-between md:justify-start space-x-3\u0026#34; style=\u0026#34; position: fixed; top: 65px; left: 50%; transform: translateX(-50%); width: 90%; /* 移动端宽度更大 */ max-width: 900px; background: linear-gradient( 135deg, rgba(255, 255, 255, 0.4), rgba(147, 197, 253, 0.3) 20%, rgba(167, 243, 208, 0.35) 50%, rgba(147, 197, 253, 0.3) 80%, rgba(110, 231, 183, 0.35) ); backdrop-filter: blur(8px); border: 1px solid rgba(255, 255, 255, 0.45); border-radius: 0.75rem; /* 移动端圆角稍小 */ box-shadow: 0 4px 6px rgba(0, 0, 0, 0.03), 0 1px 3px rgba(147, 197, 253, 0.2) inset, 0 2px 6px rgba(167, 243, 208, 0.15) inset; z-index: 999; padding: 0.25rem; /* 移动端内边距更小 */ transition: all 0.3s ease; @media (min-width: 768px) { /* 桌面端样式 */ width: 70%; padding: 0.25rem 0.5rem; border-radius: 1rem; } \u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;hidden md:flex items-center space-x-5\u0026#34;\u0026gt; {{ range .Site.Menus.subnavigation }} \u0026lt;a href=\u0026#34;{{ .URL }}\u0026#34; {{ if or (strings.HasPrefix .URL \u0026#34;http:\u0026#34; ) (strings.HasPrefix .URL \u0026#34;https:\u0026#34; ) }} target=\u0026#34;_blank\u0026#34; {{ end }} class=\u0026#34;flex items-center\u0026#34;\u0026gt; {{ if .Pre }} \u0026lt;span {{ if and .Pre .Name}} class=\u0026#34;mr-1\u0026#34; {{ end }}\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; .Pre }} \u0026lt;/span\u0026gt; {{ end }} \u0026lt;p class=\u0026#34;text-xs font-light text-gray-500 hover:text-gray-900\u0026#34; title=\u0026#34;{{ .Title }}\u0026#34;\u0026gt; {{ .Name | markdownify }} \u0026lt;/p\u0026gt; \u0026lt;/a\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ end }} {{ if .Site.Params.highlightCurrentMenuArea }} \u0026lt;script\u0026gt; (function () { var $mainmenu = $(\u0026#39;.main-menu\u0026#39;); var path = window.location.pathname; $mainmenu.find(\u0026#39;a[href=\u0026#34;\u0026#39; + path + \u0026#39;\u0026#34;]\u0026#39;).each(function (i, e) { $(e).children(\u0026#39;p\u0026#39;).addClass(\u0026#39;active\u0026#39;); }); })(); \u0026lt;/script\u0026gt; {{ end }} \u0026lt;!-- 更新主内容区域的上边距 --\u0026gt; \u0026lt;style\u0026gt; main { margin-top: 60px !important; /* 移动端上边距更小 */ } .has-submenu main { margin-top: 100px !important; /* 移动端上边距更小 */ } @media (min-width: 768px) { main { margin-top: 80px !important; /* 桌面端保持原有上边距 */ } .has-submenu main { margin-top: 120px !important; /* 桌面端保持原有上边距 */ } } \u0026lt;/style\u0026gt; \u0026lt;!-- 检测是否有子导航菜单并添加类名 --\u0026gt; \u0026lt;script\u0026gt; if (document.querySelector(\u0026#39;.main-menu + .main-menu\u0026#39;)) { document.body.classList.add(\u0026#39;has-submenu\u0026#39;); } \u0026lt;/script\u0026gt; 该菜单栏样式也能适配移动端（也是问的ai），有一部分注释，一些位置可以根据自己的需要调整。\n现在大模型的能力确实发展到了一个比较高的水平。至少在代码方面，大模型能够理解页面代码的逻辑结构，同时如果有比较明确的提问的话，模型确实有一键直达的能力。目前大模型缺乏的主要是一些想象能力和创造能力，这意味着，如果你提出的需求太过空泛或者指意不明，你几乎不会获得一个满意的结果。比如你在描述时如果使用太多诸如精致，新颖，科技感等广泛的形容词，模型很大可能会给你加一些看起来有些简单的元素。正如一千个人的心中就有一千个哈姆雷特，模型并不知道这些形容词背后的你是怎么想的。而且天下没有免费的午餐，你不花点心思提问，大模型为什么要深入思考而不偷点懒呢，可能大模型本身就认为最简单的就是最好的，对节约算力和能源也是有好处的。\n","date":"2024年11月19日","externalUrl":null,"permalink":"/posts/4/","section":"","summary":"","title":"Blowfish主题：更cool的悬浮导航栏","type":"posts"},{"content":"","date":"2024年11月19日","externalUrl":null,"permalink":"/authors/foraeu/","section":"Authors","summary":"","title":"Foraeu","type":"authors"},{"content":"","date":"2024年11月19日","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"2024年11月19日","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2024年11月19日","externalUrl":null,"permalink":"/tags/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/","section":"Tags","summary":"","title":"网页设计","type":"tags"},{"content":" 算了 不在折腾了，以后就用这个吧 2024年11月18日 · 01:02\n","date":"2024年11月18日","externalUrl":null,"permalink":"/shuoshuo-single/4/","section":"Shuoshuo-Singles","summary":"","title":"","type":"shuoshuo-single"},{"content":"","date":"2024年11月18日","externalUrl":null,"permalink":"/shuoshuo-single/","section":"Shuoshuo-Singles","summary":"","title":"Shuoshuo-Singles","type":"shuoshuo-single"},{"content":"","date":"2024年11月13日","externalUrl":null,"permalink":"/tags/numpy/","section":"Tags","summary":"","title":"Numpy","type":"tags"},{"content":"","date":"2024年11月13日","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"2024年11月13日","externalUrl":null,"permalink":"/tags/%E7%9F%A9%E9%98%B5%E5%90%88%E5%B9%B6/","section":"Tags","summary":"","title":"矩阵合并","type":"tags"},{"content":"在处理数据时，有时需要多次按行合并矩阵。本文将探讨两种不同的矩阵合并方式，并分析哪种方法更高效。\n问题是这样的：有1个矩阵，假设其shape为m*n。现在希望对于某一行l1，将其它的行依次添加到该行的后部，但由于列数限制为2n，需要生成m行，每行分别为[l1,l2],[l1,l3],……,[l1,lm]。将这种处理作用于所有的行，最终能够得到一个(m-1)*m行，2n列的矩阵。\n方法一\n创建一个列数为2n的空矩阵matrix_end，在循环中，先依次对原矩阵每一行生成m-1行，2n列的矩阵，每行分别为[li,l1],[li,l2],……,[li,lm]，然后将该矩阵与matrix_end合并。实现如下：\n点击展开代码块 import numpy as np import time # 设置随机种子 np.random.seed(0) # 记录运行时间 start = time.time() # 随机生成1000行5列的矩阵init_matrix init_matrix = np.random.randint(0, 10, size=(1000, 5)) matrix_end = np.empty((0, init_matrix.shape[1]*2)) # 逐行合并 for idx in range(init_matrix.shape[0]): neighbor_rows = np.delete(init_matrix, idx, axis=0) row = np.concatenate([init_matrix[idx] + 0 * neighbor_rows, neighbor_rows], axis=1) matrix_end = np.concatenate([matrix_end, row], axis=0) end = time.time() print(\u0026#34;Time:\u0026#34;, end - start) 最终的运行时间为7.4s\n方法二\n创建一个空列表，在循环中，先得到m-1行，2n列的矩阵，将结果存储到列表中，之后在循环外一次性将所有行合并成一个矩阵。实现如下：\n点击展开代码块 import numpy as np import time # 设置随机种子 np.random.seed(0) # 记录运行时间 start = time.time() # 随机生成1000行5列的矩阵init_matrix init_matrix = np.random.randint(0, 10, size=(1000, 5)) matrix_list = [] for idx in range(init_matrix.shape[0]): neighbor_rows = np.delete(init_matrix, idx, axis=0) row = np.concatenate([init_matrix[idx] + 0 * neighbor_rows, neighbor_rows], axis=1) matrix_list.append(row) # 一次性合并所有行 matrix = np.vstack(matrix_list) end = time.time() print(\u0026#34;Time:\u0026#34;, end - start) 最终的运行时间为0.05s\n为何性能相差如此之大？\n对于方法一，由于每次调用np.concatenate都会创建一个新的数组，所有的数据（原矩阵 + 新增的行）会被复制到新的数组中，内存需要重新分配。随着矩阵行数的增加，每次合并时的内存重新分配和数据复制的开销也会随之增加，导致性能下降。\n对于方法二，首先是使用matrix_list.append(row)将每一行的数据先存储在一个列表中，列表操作是非常高效的，因为它只是将数据引用添加到内存中，而不需要重新分配内存或复制数据。其次是最后通过np.vstack(matrix_list)一次性将所有的行合并成一个新的矩阵，np.vstack会一次性计算最终矩阵的大小并分配内存，然后将所有的行合并到一起。这比逐行合并要高效得多。\n在常规观念里，使用numpy进行操作往往比python自带的list,dict更加高效。在这个例子里，我们也看到了list数据结构的优势。虽然numpy在处理大规模矩阵和向量运算时有显著的性能优势，因为它是基于底层的C语言实现，并且能够通过向量化操作减少循环的开销，但在某些情况下，使用python的list可以在内存管理和操作的灵活性上带来额外的好处。\n在我们讨论的优化过程中，使用list来积累行数据比每次都通过np.concatenate合并矩阵要更加高效。Python列表的内存管理是动态的，NumPy数组的内存管理是静态的，数组的大小在创建时就已经确定。list的append()操作是一个时间复杂度为 O(1) 的常数时间原位操作，意味着它的开销非常小。而np.concatenate是非原位操作，每次合并矩阵时，都会导致内存重新分配和数据复制，这种操作的时间复杂度是 O(N)，尤其是在需要反复进行矩阵拼接时，矩阵也会增大，性能下降非常明显。\n因此，在需要多次进行矩阵合并或行拼接时，先将结果存储在list中，再使用numpy的批量合并操作（如np.vstack或np.concatenate）来一次性合并，这种方法能够显著提高性能，减少不必要的内存操作和数据复制。\n","date":"2024年11月13日","externalUrl":null,"permalink":"/posts/3/","section":"","summary":"","title":"矩阵合并的优化","type":"posts"},{"content":"","date":"2024年11月7日","externalUrl":null,"permalink":"/tags/%E6%89%93%E6%B2%B9%E8%AF%97/","section":"Tags","summary":"","title":"打油诗","type":"tags"},{"content":"无题 露湿花重晓天白，晨起事无门户开。\n东风携来远方信，吹乱衣襟不忍拆。\n","date":"2024年11月7日","externalUrl":null,"permalink":"/posts/2/","section":"","summary":"","title":"一首小诗","type":"posts"},{"content":" 关于背景选择 dark可以保留更多的细节，给人新鲜的感觉，但light相对简约厚重，似乎更适合长时间使用 2024年11月06日 · 14:46\n","date":"2024年11月6日","externalUrl":null,"permalink":"/shuoshuo-single/3/","section":"Shuoshuo-Singles","summary":"","title":"","type":"shuoshuo-single"},{"content":"","date":"2024年10月30日","externalUrl":null,"permalink":"/tags/%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97/","section":"Tags","summary":"","title":"距离计算","type":"tags"},{"content":" 前言 在处理包含地理坐标的数据时，常常涉及到计算两个或多个坐标之间的欧式距离。当处理大量的数据点时，计算两两之间的距离会变得非常耗时，因为随着数据点的增加，组合的数量呈二次方增长。在python中，除了常规的for循环，还有哪些方法能够更高效地计算距离呢\n坐标距离计算方法 1. NumPy的向量化 NumPy是一个高效的数值计算库，提供了向量化操作的能力，可以避免使用循环。通过将数据组织为数组，我们可以一次性计算多个距离。\n示例代码\nimport numpy as np def calculate_distances(coords1, coords2): # 将坐标转换为NumPy数组 coords1 = np.array(coords1) coords2 = np.array(coords2) # 计算两两之间的距离 dists = np.sqrt(np.sum((coords1[:, np.newaxis] - coords2) ** 2, axis=2)) return dists # 测试数据 coords1 = [(0, 0), (1, 1), (2, 2)] coords2 = [(1, 0), (2, 1)] distances = calculate_distances(coords1, coords2) print(distances) 核心思想\nNumPy的向量化使我们能够利用底层的C语言实现来加速计算，而无需显式地编写循环。通过扩展数组的维度，我们能够在单次操作中计算多个距离，显著提高了性能。\n2. KD树 KD树是一种空间分割的数据结构，可以快速地找到最近邻。对于大规模的点集合，KD树能够大幅度减少计算的复杂度。\n示例代码\nfrom scipy.spatial import KDTree def find_nearest(coords, target): tree = KDTree(coords) distances, indices = tree.query(target) return distances, indices # 测试数据 coords = [(0, 0), (1, 1), (2, 2), (3, 3)] target = (1.5, 1.5) distances, indices = find_nearest(coords, target) print(f\u0026#34;Nearest point index: {indices}, Distance: {distances}\u0026#34;) 核心思想\nKD树通过空间划分，将数据组织成树状结构，使得在高维空间中查找最近邻变得更加高效，避免了遍历所有点的必要性。\n3. 数据分块 当数据集过大时，可以考虑将数据分块处理。通过将数据划分为小块，我们可以在每次计算时只处理一部分数据，从而降低内存使用和提高速度。\n示例代码\ndef chunked_distances(coords1, coords2, chunk_size): dists = [] for i in range(0, len(coords1), chunk_size): chunk = coords1[i:i + chunk_size] dists.append(calculate_distances(chunk, coords2)) return np.concatenate(dists) # 测试数据 chunked_dists = chunked_distances(coords1, coords2, chunk_size=2) print(chunked_dists) 核心思想\n数据分块允许我们在内存有限的情况下处理大规模数据集，分块计算可以减少对内存的压力，同时保持计算的灵活性。\n4. 使用Cython或Numba Cython和Numba都是用于加速Python代码的工具。Cython通过将Python代码编译为C代码来加速计算，而Numba则通过即时编译（JIT）优化数值计算。\n示例代码\nfrom numba import jit @jit(nopython=True) def fast_calculate_distances(coords1, coords2): dists = np.zeros((len(coords1), len(coords2))) for i in range(len(coords1)): for j in range(len(coords2)): dists[i, j] = np.sqrt((coords1[i, 0] - coords2[j, 0]) ** 2 + (coords1[i, 1] - coords2[j, 1]) ** 2) return dists # 测试数据 coords1 = np.array([(0, 0), (1, 1), (2, 2)]) coords2 = np.array([(1, 0), (2, 1)]) distances = fast_calculate_distances(coords1, coords2) print(distances) 核心思想\n通过使用Cython或Numba，可以将Python的动态特性转化为静态类型，从而极大地提高计算速度，尤其是在进行大量重复计算时。\n","date":"2024年10月30日","externalUrl":null,"permalink":"/posts/1/","section":"","summary":"","title":"距离计算的优化方法","type":"posts"},{"content":" 终于 网页算是初步建好了，回归正常生活了 2024年10月28日 · 02:53\n","date":"2024年10月28日","externalUrl":null,"permalink":"/shuoshuo-single/2/","section":"Shuoshuo-Singles","summary":"","title":"","type":"shuoshuo-single"},{"content":" 更新 什么时候能把这个`{{hugo_ctx/}}这个错误弄好😫 2024年10月26日 · 02:01\n","date":"2024年10月26日","externalUrl":null,"permalink":"/shuoshuo-single/1/","section":"Shuoshuo-Singles","summary":"","title":"","type":"shuoshuo-single"},{"content":" Hello World 🌍 欢迎来到我的第一篇博客！🎉\n简介 本人的第一篇博客 网站基于 Github Pages + Hugo 搭建 主题为Blowfish 建站时间 📅 2024-10-24\n期待 希望以后能坚持更新，写一些有意义的博客。✍️\n感想 虽然花了很多时间，但感觉搭建的过程很有趣 😊，不枉我的一番胡乱折腾。\n参考 网站图标：Numpy 的图标 Icons8\n标签页面：ZhenShuo2021\n悬浮播放器，说说：金圣皓\n评论系统：utterances\n主页诗词调用：今日诗词 API\n","date":"2024年10月26日","externalUrl":null,"permalink":"/posts/0/","section":"","summary":"","title":"Hello World","type":"posts"},{"content":"","date":"2024年10月26日","externalUrl":null,"permalink":"/tags/%E7%AC%AC%E4%B8%80%E7%AF%87/","section":"Tags","summary":"","title":"第一篇","type":"tags"},{"content":" ","externalUrl":null,"permalink":"/about/","section":"","summary":"","title":"","type":"page"},{"content":" 更新 什么时候能把这个`{{hugo_ctx/}}这个错误弄好😫 2024年10月26日 · 02:01\n终于 网页算是初步建好了，回归正常生活了 2024年10月28日 · 02:53\n关于背景选择 dark可以保留更多的细节，给人新鲜的感觉，但light相对简约厚重，似乎更适合长时间使用 2024年11月06日 · 14:46\n算了 不在折腾了，以后就用这个吧 2024年11月18日 · 01:02\n","externalUrl":null,"permalink":"/shuoshuo/","section":"","summary":"","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]