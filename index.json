[{"content":" ","date":"2024年11月6日","externalUrl":null,"permalink":"/","section":"","summary":" ","title":"","type":"page"},{"content":" 关于背景选择 dark可以保留更多的细节，给人新鲜的感觉，但light相对简约厚重，似乎更适合长时间使用 2024年11月06日 · 14:46\n","date":"2024年11月6日","externalUrl":null,"permalink":"/shuoshuo-single/3/","section":"Shuoshuo-Singles","summary":"","title":"","type":"shuoshuo-single"},{"content":"","date":"2024年11月6日","externalUrl":null,"permalink":"/shuoshuo-single/","section":"Shuoshuo-Singles","summary":"","title":"Shuoshuo-Singles","type":"shuoshuo-single"},{"content":"","date":"2024年10月30日","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"2024年10月30日","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2024年10月30日","externalUrl":null,"permalink":"/tags/%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97/","section":"Tags","summary":"","title":"距离计算","type":"tags"},{"content":" 前言 # 在处理包含地理坐标的数据时，常常涉及到计算两个或多个坐标之间的欧式距离。当处理大量的数据点时，计算两两之间的距离会变得非常耗时，因为随着数据点的增加，组合的数量呈二次方增长。在python中，除了常规的for循环，还有哪些方法能够更高效地计算距离呢\n坐标距离计算方法 # 1. NumPy的向量化 # NumPy是一个高效的数值计算库，提供了向量化操作的能力，可以避免使用循环。通过将数据组织为数组，我们可以一次性计算多个距离。\n示例代码 # import numpy as np def calculate_distances(coords1, coords2): # 将坐标转换为NumPy数组 coords1 = np.array(coords1) coords2 = np.array(coords2) # 计算两两之间的距离 dists = np.sqrt(np.sum((coords1[:, np.newaxis] - coords2) ** 2, axis=2)) return dists # 测试数据 coords1 = [(0, 0), (1, 1), (2, 2)] coords2 = [(1, 0), (2, 1)] distances = calculate_distances(coords1, coords2) print(distances) 核心思想 # NumPy的向量化使我们能够利用底层的C语言实现来加速计算，而无需显式地编写循环。通过扩展数组的维度，我们能够在单次操作中计算多个距离，显著提高了性能。\n2. KD树 # KD树是一种空间分割的数据结构，可以快速地找到最近邻。对于大规模的点集合，KD树能够大幅度减少计算的复杂度。\n示例代码 # from scipy.spatial import KDTree def find_nearest(coords, target): tree = KDTree(coords) distances, indices = tree.query(target) return distances, indices # 测试数据 coords = [(0, 0), (1, 1), (2, 2), (3, 3)] target = (1.5, 1.5) distances, indices = find_nearest(coords, target) print(f\u0026#34;Nearest point index: {indices}, Distance: {distances}\u0026#34;) 核心思想 # KD树通过空间划分，将数据组织成树状结构，使得在高维空间中查找最近邻变得更加高效，避免了遍历所有点的必要性。\n3. 数据分块 # 当数据集过大时，可以考虑将数据分块处理。通过将数据划分为小块，我们可以在每次计算时只处理一部分数据，从而降低内存使用和提高速度。\n示例代码 # def chunked_distances(coords1, coords2, chunk_size): dists = [] for i in range(0, len(coords1), chunk_size): chunk = coords1[i:i + chunk_size] dists.append(calculate_distances(chunk, coords2)) return np.concatenate(dists) # 测试数据 chunked_dists = chunked_distances(coords1, coords2, chunk_size=2) print(chunked_dists) 核心思想 # 数据分块允许我们在内存有限的情况下处理大规模数据集，分块计算可以减少对内存的压力，同时保持计算的灵活性。\n4. 使用Cython或Numba # Cython和Numba都是用于加速Python代码的工具。Cython通过将Python代码编译为C代码来加速计算，而Numba则通过即时编译（JIT）优化数值计算。\n示例代码 # from numba import jit @jit(nopython=True) def fast_calculate_distances(coords1, coords2): dists = np.zeros((len(coords1), len(coords2))) for i in range(len(coords1)): for j in range(len(coords2)): dists[i, j] = np.sqrt((coords1[i, 0] - coords2[j, 0]) ** 2 + (coords1[i, 1] - coords2[j, 1]) ** 2) return dists # 测试数据 coords1 = np.array([(0, 0), (1, 1), (2, 2)]) coords2 = np.array([(1, 0), (2, 1)]) distances = fast_calculate_distances(coords1, coords2) print(distances) 核心思想 # 通过使用Cython或Numba，可以将Python的动态特性转化为静态类型，从而极大地提高计算速度，尤其是在进行大量重复计算时。\n","date":"2024年10月30日","externalUrl":null,"permalink":"/posts/1/","section":"日志","summary":"","title":"距离计算的优化方法","type":"posts"},{"content":" 终于 网页算是初步建好了，回归正常生活了 2024年10月28日 · 02:53\n","date":"2024年10月28日","externalUrl":null,"permalink":"/shuoshuo-single/2/","section":"Shuoshuo-Singles","summary":"","title":"","type":"shuoshuo-single"},{"content":" 更新 什么时候能把这个`{{hugo_ctx/}}这个错误弄好😫 2024年10月26日 · 02:01\n","date":"2024年10月26日","externalUrl":null,"permalink":"/shuoshuo-single/1/","section":"Shuoshuo-Singles","summary":"","title":"","type":"shuoshuo-single"},{"content":" Hello World 🌍 # 欢迎来到我的第一篇博客！🎉\n简介 # 本人的第一篇博客 网站基于 Github Pages + Hugo 搭建 建站时间 # 📅 2024-10-24\n期待 # 希望以后能坚持更新，写一些有意义的博客。✍️\n感想 # 虽然花了很多时间，但感觉搭建的过程很有趣 😊，不枉我的一番胡乱折腾。\n","date":"2024年10月26日","externalUrl":null,"permalink":"/posts/0/","section":"日志","summary":"","title":"Hello World","type":"posts"},{"content":"","date":"2024年10月26日","externalUrl":null,"permalink":"/tags/%E7%AC%AC%E4%B8%80%E7%AF%87/","section":"Tags","summary":"","title":"第一篇","type":"tags"},{"content":"","date":"2024年10月25日","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"2024年10月25日","externalUrl":null,"permalink":"/authors/foraeu/","section":"Authors","summary":"","title":"Foraeu","type":"authors"},{"content":"","date":"2024年10月25日","externalUrl":null,"permalink":"/posts/","section":"日志","summary":"","title":"日志","type":"posts"},{"content":"\n更新 什么时候能把这个`{{hugo_ctx/}}这个错误弄好😫 2024年10月26日 · 02:01\n终于 网页算是初步建好了，回归正常生活了 2024年10月28日 · 02:53\n关于背景选择 dark可以保留更多的细节，给人新鲜的感觉，但light相对简约厚重，似乎更适合长时间使用 2024年11月06日 · 14:46\n","date":"2024年10月24日","externalUrl":null,"permalink":"/shuoshuo/","section":"","summary":"","title":"说说","type":"page"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":" 关于我 # 有时间再写吧\n","externalUrl":null,"permalink":"/about/","section":"","summary":"","title":"关于","type":"page"}]